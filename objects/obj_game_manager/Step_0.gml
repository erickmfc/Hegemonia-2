// ===============================================
// HEGEMONIA GLOBAL - GAME MANAGER STEP
// Sistema de Debug Ultra Otimizado + Sele√ß√£o Global
// ===============================================

// Incrementar contador global de frames
global.game_frame++;

// Resetar contador de debug a cada frame
global.debug_reset_frame();

// === SISTEMA DE LOD E OTIMIZA√á√ÉO PARA MAPAS GRANDES ===
// Executar apenas a cada 5 frames para n√£o sobrecarregar
// ‚úÖ CORRE√á√ÉO: Usar global.game_frame ao inv√©s de current_frame
// ‚úÖ DESABILITADO: Estava fazendo unidades sumirem ao mudar de local
if (global.game_frame mod 5 == 0) {
    // Gerenciar ativa√ß√£o/desativa√ß√£o de inst√¢ncias
    // scr_manage_instance_lod(); // DESABILITADO - causava sumi√ßo de unidades
}

// ‚úÖ OTIMIZA√á√ÉO: Reconstruir spatial grid a cada 60 frames (1 segundo a 60 FPS)
if (variable_global_exists("spatial_grid_initialized") && global.spatial_grid_initialized) {
    if (global.game_frame mod 60 == 0) {
        scr_rebuild_spatial_grid();
    }
}

// --- SISTEMA DE DEBUG GLOBAL ---
// A sele√ß√£o agora √© gerenciada pelo obj_controlador_unidades
// Este objeto foca apenas no debug e inicializa√ß√£o

// === GERENCIAMENTO DE INFLATION ===
// Reduzir infla√ß√£o gradualmente se n√£o usar a Casa da Moeda
if (global.taxa_inflacao > 0) {
    global.taxa_inflacao -= global.inflacao_decay;
    if (global.taxa_inflacao < 0) {
        global.taxa_inflacao = 0;
    }
}

// === SISTEMA DE ESTABILIDADE SOCIAL ===
// Calcular estabilidade baseada na infla√ß√£o
var _perda_estabilidade = global.taxa_inflacao * global.instabilidade_por_inflacao;
global.estabilidade_social = 100 - (_perda_estabilidade * 100);

// Limitar estabilidade entre 0 e 100
if (global.estabilidade_social < 0) {
    global.estabilidade_social = 0;
} else if (global.estabilidade_social > 100) {
    global.estabilidade_social = 100;
}

// === CONSEQU√äNCIAS DE ALTA INFLATION ===
// Se infla√ß√£o muito alta, penalizar produ√ß√£o
if (global.taxa_inflacao > 0.3) {
    // Reduzir produ√ß√£o de recursos em 20%
    global.penalidade_producao = 0.8;
} else {
    global.penalidade_producao = 1.0;
}

// === CONSEQU√äNCIAS AVAN√áADAS DE ALTA INFLATION ===
if (global.taxa_inflacao > 0.4) {
    // Reduzir produ√ß√£o de todas as estruturas
    global.penalidade_producao = 0.5;
    show_debug_message("‚ö†Ô∏è CRISE ECON√îMICA: Produ√ß√£o reduzida em 50%!");
}

if (global.taxa_inflacao > 0.6) {
    // Instabilidade social extrema
    global.estabilidade_social = 0;
    show_debug_message("üö® INSTABILIDADE SOCIAL: Risco de revolta popular!");
}

    // === SISTEMA DE IMPOSTOS (FUTURO) ===
    // TODO: Implementar coleta de impostos mensal
    // if (global.game_frame % (room_speed * 1800) == 0) {
    //     // --- SISTEMA DE ARRECADA√á√ÉO DE IMPOSTOS ---
    //     
    //     // 1. Calcula a base de arrecada√ß√£o
    //     // Cada cidad√£o gera atividade econ√¥mica
    //     var base_economica = global.populacao * global.base_economica_por_cidadao;
    //     
    //     // 2. Calcula o valor arrecadado com base na taxa de impostos
    //     var impostos_coletados = base_economica * global.taxa_impostos;
    //     
    //     // 3. Adiciona o dinheiro ao tesouro da na√ß√£o
    //     global.dinheiro += impostos_coletados;
    //     global.estoque_recursos[? "Dinheiro"] = global.dinheiro;
    //     
    //     // 4. Feedback para o jogador
    //     show_debug_message("üí∞ IMPOSTOS DO M√äS ARRECADADOS: " + string(impostos_coletados) + " CG");
    //     show_debug_message("üìä Base econ√¥mica: " + string(base_economica) + " CG");
    //     show_debug_message("üìà Taxa de impostos: " + string(round(global.taxa_impostos * 100)) + "%");
    // }

    // === SISTEMA FINANCEIRO - PAGAMENTO DE JUROS ===
    // Pagamento autom√°tico de juros mensal (a cada 30 segundos)
    if (global.divida_total > 0 && global.game_frame % (room_speed * 30) == 0) {
        // Verificar se tem dinheiro suficiente para pagar juros
        if (global.dinheiro >= global.juros_mensais) {
            // Pagar juros
            global.dinheiro -= global.juros_mensais;
            global.estoque_recursos[? "Dinheiro"] = global.dinheiro;
            
            show_debug_message("üí∏ JUROS PAGOS: $" + string(global.juros_mensais));
            show_debug_message("üí∞ Dinheiro restante: $" + string(global.dinheiro));
            show_debug_message("üìä D√≠vida restante: $" + string(global.divida_total));
        } else {
            // N√£o tem dinheiro suficiente - d√≠vida aumenta
            var _juros_nao_pagos = global.juros_mensais - global.dinheiro;
            global.divida_total += _juros_nao_pagos;
            global.dinheiro = 0;
            global.estoque_recursos[? "Dinheiro"] = global.dinheiro;
            
            show_debug_message("‚ö†Ô∏è JUROS N√ÉO PAGOS!");
            show_debug_message("üí∏ Juros devidos: $" + string(global.juros_mensais));
            show_debug_message("üí∞ Dinheiro dispon√≠vel: $" + string(global.dinheiro));
            show_debug_message("üìà D√≠vida aumentou para: $" + string(global.divida_total));
            show_debug_message("üö® ATEN√á√ÉO: D√≠vida em crescimento!");
        }
    }

// === SISTEMA DE CONSUMO SIMPLIFICADO ===
// Executa a cada ciclo (30 minutos)
if (global.game_frame % (room_speed * 1800) == 0) {
    
    // === CONSUMO DE ALIMENTO ===
    var consumo_total = global.populacao * 0.5; // 0.5 Alimento por pessoa por ciclo
    
    if (global.alimento >= consumo_total) {
        // Popula√ß√£o bem alimentada
        global.alimento -= consumo_total;
        global.estoque_recursos[? "Alimento"] = global.alimento;
        
        // Crescimento populacional (1% por ciclo se bem alimentada)
        // MAS APENAS SE N√ÉO EXCEDER O LIMITE POPULACIONAL
        var crescimento = floor(global.populacao * 0.01);
        var _nova_populacao = global.populacao + crescimento;
        
        // Verificar se n√£o excede o limite populacional
        if (_nova_populacao <= global.limite_populacional) {
            global.populacao = _nova_populacao;
            global.estoque_recursos[? "Popula√ß√£o"] = global.populacao;
            show_debug_message("üìà Crescimento: +" + string(crescimento) + " pessoas");
        } else {
            // Crescimento limitado pelo limite populacional
            var _crescimento_limite = global.limite_populacional - global.populacao;
            if (_crescimento_limite > 0) {
                global.populacao += _crescimento_limite;
                global.estoque_recursos[? "Popula√ß√£o"] = global.populacao;
                show_debug_message("üìà Crescimento limitado: +" + string(_crescimento_limite) + " pessoas");
            } else {
                show_debug_message("üö´ Limite populacional atingido! Construa mais casas para crescer.");
            }
        }
        
        show_debug_message("üçΩÔ∏è Consumo: " + string(consumo_total) + " Alimento");
        show_debug_message("üë• Popula√ß√£o total: " + string(global.populacao));
        
    } else {
        // Popula√ß√£o mal alimentada - sem crescimento
        show_debug_message("‚ö†Ô∏è Popula√ß√£o mal alimentada - sem crescimento");
    }
}