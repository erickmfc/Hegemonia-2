/// @description Controle de sele√ß√£o de unidades - SISTEMA UNIVERSAL COM ZOOM

// =========================================================================
// IN√çCIO DO C√ìDIGO DE SELE√á√ÉO UNIVERSAL (COM ZOOM E QUALQUER MAPA)
// =========================================================================

// Checa por um √∫nico clique do bot√£o esquerdo do mouse
if (mouse_check_button_pressed(mb_left)) {

    // --- PASSO 1: Obter as coordenadas do mouse na TELA (GUI) ---
    // Esta √© a posi√ß√£o X e Y do cursor na janela do jogo.
    var _mouse_gui_x = device_mouse_x_to_gui(0);
    var _mouse_gui_y = device_mouse_y_to_gui(0);

    // --- PASSO 2: Obter as informa√ß√µes da C√ÇMERA atual ---
    // Pegamos a refer√™ncia da c√¢mera que est√° ativa na primeira viewport
    var _cam = view_camera[0];
    
    // Onde a c√¢mera est√° posicionada dentro do MUNDO do jogo
    var _cam_x = camera_get_view_x(_cam);
    var _cam_y = camera_get_view_y(_cam);
    
    // O tamanho da "lente" da c√¢mera (quanto do MUNDO ela est√° enxergando)
    var _cam_w = camera_get_view_width(_cam);
    var _cam_h = camera_get_view_height(_cam);

    // --- PASSO 3: Calcular o n√≠vel de ZOOM atual ---
    // Comparamos o tamanho da lente da c√¢mera com o tamanho da tela para saber o zoom.
    var _zoom_level_x = _cam_w / display_get_gui_width();
    var _zoom_level_y = _cam_h / display_get_gui_height();

    // --- PASSO 4: A CONVERS√ÉO M√ÅGICA ---
    // CORRE√á√ÉO: Usar fun√ß√£o global para coordenadas consistentes
    var _coords = global.scr_mouse_to_world();
    var _mouse_world_x = _coords[0];
    var _mouse_world_y = _coords[1];

    // --- PASSO 5: Verificar se clicou em edif√≠cio primeiro ---
    // CORRE√á√ÉO: Usar position_meeting para detec√ß√£o mais precisa
    var edificio_clicado = noone;
    
    // Lista de todos os edif√≠cios que podem ser clicados
    var edificios = [
        obj_quartel,
        obj_quartel_marinha, 
        obj_aeroporto_militar,
        obj_casa,
        obj_banco,
        obj_research_center
    ];
    
    // Verificar cada edif√≠cio usando position_meeting
    for (var i = 0; i < array_length(edificios); i++) {
        var _edificio_obj = edificios[i];
        if (object_exists(_edificio_obj)) {
            var _instancia = instance_position(_mouse_world_x, _mouse_world_y, _edificio_obj);
            if (_instancia != noone) {
                edificio_clicado = _instancia;
                break;
            }
        }
    }
    
    if (edificio_clicado != noone) {
        show_debug_message("Clique em edif√≠cio detectado - ignorando sele√ß√£o de unidades");
        show_debug_message("Edif√≠cio: " + object_get_name(edificio_clicado.object_index) + " ID: " + string(edificio_clicado));
        // CORRE√á√ÉO: Remover return para permitir que Mouse Events dos edif√≠cios sejam executados
        // O Mouse Event do edif√≠cio ser√° processado normalmente ap√≥s este Step Event
    }

    // --- PASSO 6: Usar as coordenadas CORRETAS para selecionar ---
    // Agora, em vez de 'mouse_x', usamos nossas novas vari√°veis _mouse_world_x/y
    var _instancia_selecionada = noone;
    
    // Verifica navios primeiro para melhor detec√ß√£o
    var hit_lp = collision_point(_mouse_world_x, _mouse_world_y, obj_lancha_patrulha, false, true);
    if (hit_lp != noone) _instancia_selecionada = hit_lp;
    
    if (_instancia_selecionada == noone) {
        // Debug: verificar se h√° Constellations no jogo
        var _total_constellations = instance_number(obj_Constellation);
        show_debug_message("üîç Total de Constellations no jogo: " + string(_total_constellations));
        
        if (_total_constellations > 0) {
            // Listar posi√ß√µes de todos os Constellations
            with (obj_Constellation) {
                show_debug_message("üö¢ Constellation ID: " + string(id) + " em (" + string(x) + ", " + string(y) + ")");
                show_debug_message("üö¢ Bbox: left=" + string(bbox_left) + " right=" + string(bbox_right) + " top=" + string(bbox_top) + " bottom=" + string(bbox_bottom));
            }
        }
        
        // Tentar diferentes m√©todos de detec√ß√£o
        var hit_constellation = collision_point(_mouse_world_x, _mouse_world_y, obj_Constellation, false, true);
        show_debug_message("üîç Resultado collision_point: " + string(hit_constellation));
        
        // M√©todo alternativo
        var hit_constellation_alt = instance_position(_mouse_world_x, _mouse_world_y, obj_Constellation);
        show_debug_message("üîç Resultado instance_position: " + string(hit_constellation_alt));
        
        // M√©todo manual - verificar se o mouse est√° dentro da bounding box
        var hit_constellation_manual = noone;
        with (obj_Constellation) {
            show_debug_message("üîç Verificando Constellation ID: " + string(id));
            show_debug_message("üîç Mouse: (" + string(_mouse_world_x) + ", " + string(_mouse_world_y) + ")");
            show_debug_message("üîç Bbox: (" + string(bbox_left) + ", " + string(bbox_top) + ") a (" + string(bbox_right) + ", " + string(bbox_bottom) + ")");
            
            if (_mouse_world_x >= bbox_left && _mouse_world_x <= bbox_right && 
                _mouse_world_y >= bbox_top && _mouse_world_y <= bbox_bottom) {
                hit_constellation_manual = id;
                show_debug_message("üîç Constellation detectado via bbox manual!");
                break;
            }
        }
        show_debug_message("üîç Resultado bbox manual: " + string(hit_constellation_manual));
        
        // Usar o m√©todo que funcionar
        if (hit_constellation_manual != noone) {
            hit_constellation = hit_constellation_manual;
        } else if (hit_constellation_alt != noone) {
            hit_constellation = hit_constellation_alt;
        }
        
        if (hit_constellation != noone) {
            _instancia_selecionada = hit_constellation;
            show_debug_message("üö¢ CONSTELLATION DETECTADO VIA CONTROLADOR!");
            show_debug_message("üö¢ ID do Constellation: " + string(hit_constellation));
            show_debug_message("üö¢ Posi√ß√£o do mouse: (" + string(_mouse_world_x) + ", " + string(_mouse_world_y) + ")");
            show_debug_message("üö¢ Posi√ß√£o do Constellation: (" + string(hit_constellation.x) + ", " + string(hit_constellation.y) + ")");
        } else {
            show_debug_message("‚ùå NENHUM CONSTELLATION DETECTADO no clique!");
        }
    }
    
    if (_instancia_selecionada == noone) {
        var hit_inf = collision_point(_mouse_world_x, _mouse_world_y, obj_infantaria, false, true);
        if (hit_inf != noone) _instancia_selecionada = hit_inf;
    }
    if (_instancia_selecionada == noone) {
        var hit_aa = collision_point(_mouse_world_x, _mouse_world_y, obj_soldado_antiaereo, false, true);
        if (hit_aa != noone) _instancia_selecionada = hit_aa;
    }
    if (_instancia_selecionada == noone) {
        var hit_tk = collision_point(_mouse_world_x, _mouse_world_y, obj_tanque, false, true);
        if (hit_tk != noone) _instancia_selecionada = hit_tk;
    }
    if (_instancia_selecionada == noone) {
        var hit_baa = collision_point(_mouse_world_x, _mouse_world_y, obj_blindado_antiaereo, false, true);
        if (hit_baa != noone) _instancia_selecionada = hit_baa;
    }
    if (_instancia_selecionada == noone) {
        var hit_f5 = collision_point(_mouse_world_x, _mouse_world_y, obj_caca_f5, false, true);
        if (hit_f5 != noone) _instancia_selecionada = hit_f5;
    }
    if (_instancia_selecionada == noone) {
        var hit_heli = collision_point(_mouse_world_x, _mouse_world_y, obj_helicoptero_militar, false, true);
        if (hit_heli != noone) _instancia_selecionada = hit_heli;
    }

    // --- PASSO 7: L√≥gica de Sele√ß√£o ---
    if (instance_exists(_instancia_selecionada)) {
        // Se est√°vamos esperando um alvo para o comando SEGUIR
        if (instance_exists(global.esperando_alvo_seguir)) {
            global.esperando_alvo_seguir.alvo_seguir = _instancia_selecionada;
            
            // Determinar o estado correto baseado no tipo de unidade
            if (global.esperando_alvo_seguir.object_index == obj_caca_f5) {
                // Sistema simplificado - apenas define alvo para seguir
                global.esperando_alvo_seguir.alvo_seguir = _instancia_selecionada;
            } else if (global.esperando_alvo_seguir.object_index == obj_helicoptero_militar) {
                global.esperando_alvo_seguir.estado = "seguindo";
            }
            
            show_debug_message("üéØ Alvo definido para seguir: " + object_get_name(_instancia_selecionada.object_index));
            global.esperando_alvo_seguir = noone; // Reseta o modo
        } else {
            // Sele√ß√£o normal de unidades
            // Desselecionar todas as outras unidades primeiro
            with (obj_infantaria) { selecionado = false; }
            with (obj_soldado_antiaereo) { selecionado = false; }
            with (obj_tanque) { selecionado = false; }
            with (obj_blindado_antiaereo) { selecionado = false; }
            with (obj_lancha_patrulha) { selecionado = false; }
            with (obj_Constellation) { selecionado = false; }
            with (obj_caca_f5) { selecionado = false; }
            with (obj_helicoptero_militar) { selecionado = false; }
            
            // Selecionar a unidade clicada
            _instancia_selecionada.selecionado = true;
            global.unidade_selecionada = _instancia_selecionada;
            
            // Debug para verificar sele√ß√£o da lancha
            if (object_get_name(_instancia_selecionada.object_index) == "obj_lancha_patrulha") {
                show_debug_message("üö¢ LANCHA SELECIONADA VIA CONTROLADOR!");
                show_debug_message("üö¢ ID da lancha: " + string(_instancia_selecionada));
                show_debug_message("üö¢ global.unidade_selecionada: " + string(global.unidade_selecionada));
                show_debug_message("üö¢ Tem pontos_patrulha: " + string(variable_instance_exists(_instancia_selecionada, "pontos_patrulha")));
            }
            
            // Debug para verificar sele√ß√£o do Constellation
            if (object_get_name(_instancia_selecionada.object_index) == "obj_Constellation") {
                show_debug_message("üö¢ CONSTELLATION SELECIONADO VIA CONTROLADOR!");
                show_debug_message("üö¢ ID do Constellation: " + string(_instancia_selecionada));
                show_debug_message("üö¢ global.unidade_selecionada: " + string(global.unidade_selecionada));
                show_debug_message("üö¢ Estado: " + string(_instancia_selecionada.estado));
                show_debug_message("üö¢ Selecionado: " + string(_instancia_selecionada.selecionado));
            }
            
            // ======================================================================
            // FUNCIONALIDADE DE CENTRALIZAR C√ÇMERA DESATIVADA
            // ======================================================================
            // var _input_manager = instance_find(obj_input_manager, 0);
            // if (instance_exists(_input_manager)) {
            //     // Manda o gerenciador de c√¢mera mover a c√¢mera para a posi√ß√£o da unidade
            //     _input_manager.camera_x = _instancia_selecionada.x;
            //     _input_manager.camera_y = _instancia_selecionada.y;
            //     
            //     show_debug_message("üì∑ C√¢mera centralizada na unidade: " + object_get_name(_instancia_selecionada.object_index));
            // }
            // ======================================================================
            
            show_debug_message("Sele√ß√£o: " + object_get_name(_instancia_selecionada.object_index));
            show_debug_message("üìç Coordenadas mundo: (" + string(_mouse_world_x) + ", " + string(_mouse_world_y) + ")");
        }
    } else {
        // Se clicamos no vazio
        if (instance_exists(global.esperando_alvo_seguir)) {
            // Cancelar modo de seguir se clicou no vazio
            show_debug_message("‚ùå Modo SEGUIR cancelado - clique no vazio");
            global.esperando_alvo_seguir = noone;
        } else {
            // Dessele√ß√£o normal
            with (obj_infantaria) { selecionado = false; }
            with (obj_soldado_antiaereo) { selecionado = false; }
            with (obj_tanque) { selecionado = false; }
            with (obj_blindado_antiaereo) { selecionado = false; }
            with (obj_lancha_patrulha) { selecionado = false; }
            with (obj_Constellation) { selecionado = false; }
            with (obj_caca_f5) { selecionado = false; }
            with (obj_helicoptero_militar) { selecionado = false; }
            global.unidade_selecionada = noone;
            
            show_debug_message("Clique no vazio.");
            show_debug_message("üìç Coordenadas mundo: (" + string(_mouse_world_x) + ", " + string(_mouse_world_y) + ")");
        }
    }
    
    // === L√ìGICA DE ADICIONAR PONTOS DE PATRULHA ===
    if (instance_exists(global.definindo_patrulha)) {
        // Adicionar ponto de patrulha no local clicado
        // Verificar qual vari√°vel de patrulha usar baseado no tipo de objeto
        var _unidade = global.definindo_patrulha;
        var _lista_patrulha = noone;
        
        // Determinar qual lista de patrulha usar baseado no objeto
        if (_unidade.object_index == obj_infantaria) {
            _lista_patrulha = _unidade.patrulha; // obj_infantaria usa 'patrulha'
        } else if (_unidade.object_index == obj_lancha_patrulha) {
            _lista_patrulha = _unidade.pontos_patrulha; // obj_lancha_patrulha usa 'pontos_patrulha'
        } else if (_unidade.object_index == obj_caca_f5) {
            _lista_patrulha = _unidade.pontos_patrulha; // obj_caca_f5 usa 'pontos_patrulha'
        } else if (_unidade.object_index == obj_helicoptero_militar) {
            _lista_patrulha = _unidade.pontos_patrulha; // obj_helicoptero_militar usa 'pontos_patrulha'
        } else if (_unidade.object_index == obj_Constellation) {
            // Constellation n√£o tem sistema de patrulha no c√≥digo novo
            _lista_patrulha = noone;
        } else {
            // Para outros objetos, tentar 'patrol_points' ou 'pontos_patrulha'
            if (variable_instance_exists(_unidade, "patrol_points")) {
                _lista_patrulha = _unidade.patrol_points;
            } else if (variable_instance_exists(_unidade, "pontos_patrulha")) {
                _lista_patrulha = _unidade.pontos_patrulha;
            } else if (variable_instance_exists(_unidade, "patrulha")) {
                _lista_patrulha = _unidade.patrulha;
            }
        }
        
        // Adicionar ponto se a lista foi encontrada
        if (_lista_patrulha != noone && ds_exists(_lista_patrulha, ds_type_list)) {
            ds_list_add(_lista_patrulha, [_mouse_world_x, _mouse_world_y]);
            show_debug_message("üìç Ponto de patrulha adicionado: (" + string(_mouse_world_x) + ", " + string(_mouse_world_y) + ")");
            show_debug_message("üìä Total de pontos: " + string(ds_list_size(_lista_patrulha)));
        } else {
            show_debug_message("‚ùå ERRO: Lista de patrulha n√£o encontrada para " + object_get_name(_unidade.object_index));
        }
    }
}
// =========================================================================
// FIM DO C√ìDIGO DE SELE√á√ÉO
// =========================================================================

// =========================================================================
// SELE√á√ÉO M√öLTIPLA COM ARRASTAR (COORDENADAS COM ZOOM)
// =========================================================================

if (mouse_check_button(mb_left)) {
    if (!selecionando) {
        selecionando = true;
        
        // Usar o mesmo sistema de convers√£o de coordenadas
        var _mouse_gui_x = device_mouse_x_to_gui(0);
        var _mouse_gui_y = device_mouse_y_to_gui(0);
        var _cam = view_camera[0];
        var _cam_x = camera_get_view_x(_cam);
        var _cam_y = camera_get_view_y(_cam);
        var _cam_w = camera_get_view_width(_cam);
        var _cam_h = camera_get_view_height(_cam);
        var _zoom_level_x = _cam_w / display_get_gui_width();
        var _zoom_level_y = _cam_h / display_get_gui_height();
        
        inicio_selecao_x = _cam_x + (_mouse_gui_x * _zoom_level_x);
        inicio_selecao_y = _cam_y + (_mouse_gui_y * _zoom_level_y);
    }
} else {
    if (selecionando) {
        selecionando = false;
        
        // Usar o mesmo sistema de convers√£o de coordenadas
        var _mouse_gui_x = device_mouse_x_to_gui(0);
        var _mouse_gui_y = device_mouse_y_to_gui(0);
        var _cam = view_camera[0];
        var _cam_x = camera_get_view_x(_cam);
        var _cam_y = camera_get_view_y(_cam);
        var _cam_w = camera_get_view_width(_cam);
        var _cam_h = camera_get_view_height(_cam);
        var _zoom_level_x = _cam_w / display_get_gui_width();
        var _zoom_level_y = _cam_h / display_get_gui_height();
        
        var world_x = _cam_x + (_mouse_gui_x * _zoom_level_x);
        var world_y = _cam_y + (_mouse_gui_y * _zoom_level_y);
        
        var min_x = min(inicio_selecao_x, world_x);
        var max_x = max(inicio_selecao_x, world_x);
        var min_y = min(inicio_selecao_y, world_y);
        var max_y = max(inicio_selecao_y, world_y);
        
        with (obj_lancha_patrulha) {
            if (x >= min_x && x <= max_x && y >= min_y && y <= max_y) {
                selecionado = true;
                show_debug_message("üö¢ Navio inclu√≠do na sele√ß√£o m√∫ltipla!");
            }
        }
        with (obj_infantaria) {
            if (x >= min_x && x <= max_x && y >= min_y && y <= max_y) {
                selecionado = true;
            }
        }
        with (obj_soldado_antiaereo) {
            if (x >= min_x && x <= max_x && y >= min_y && y <= max_y) {
                selecionado = true;
            }
        }
        with (obj_tanque) {
            if (x >= min_x && x <= max_x && y >= min_y && y <= max_y) {
                selecionado = true;
            }
        }
        with (obj_blindado_antiaereo) {
            if (x >= min_x && x <= max_x && y >= min_y && y <= max_y) {
                selecionado = true;
            }
        }
        with (obj_caca_f5) {
            if (x >= min_x && x <= max_x && y >= min_y && y <= max_y) {
                selecionado = true;
                show_debug_message("‚úàÔ∏è F-5 inclu√≠do na sele√ß√£o m√∫ltipla!");
            }
        }
        with (obj_helicoptero_militar) {
            if (x >= min_x && x <= max_x && y >= min_y && y <= max_y) {
                selecionado = true;
                show_debug_message("üöÅ Helic√≥ptero inclu√≠do na sele√ß√£o m√∫ltipla!");
            }
        }
    }
}

// ===============================================
// GERENCIADOR DE COMANDOS PARA UNIDADE SELECIONADA
// ===============================================
if (instance_exists(global.unidade_selecionada)) {
    var _unidade = global.unidade_selecionada;

    // Comandos para F-5 (COMANDOS CENTRALIZADOS NO INPUT MANAGER)
    if (_unidade.object_index == obj_caca_f5) {
        // Comandos P e O j√° est√£o no Step do pr√≥prio F-5
        // Comandos Q e E j√° est√£o no obj_input_manager
        // Aqui s√≥ mantemos comandos espec√≠ficos do controlador

        // Comando de Teste de M√≠sseis (Tecla T)
        if (keyboard_check_pressed(ord("T"))) {
            show_debug_message("üîç === TESTE SISTEMA M√çSSEIS F-5 ===");
            
            // Contar unidades
            var _f5_count = instance_number(obj_caca_f5);
            var _inimigo_count = instance_number(obj_inimigo);
            
            show_debug_message("üìä F-5s no mapa: " + string(_f5_count));
            show_debug_message("üìä Inimigos no mapa: " + string(_inimigo_count));
            
            if (_f5_count == 0) {
                show_debug_message("‚ùå ERRO: Nenhum F-5 encontrado no mapa!");
                return;
            }
            
            if (_inimigo_count == 0) {
                show_debug_message("‚ùå ERRO: Nenhum inimigo encontrado no mapa!");
                show_debug_message("üí° SOLU√á√ÉO: Crie alguns obj_inimigo no mapa para testar");
                return;
            }
            
            // Testar cada F-5
            with (obj_caca_f5) {
                show_debug_message("‚úàÔ∏è Testando F-5 ID: " + string(id));
                show_debug_message("   - Velocidade: " + string(velocidade_atual));
                show_debug_message("   - Modo ataque: " + string(modo_ataque));
                show_debug_message("   - Altura voo: " + string(altura_voo));
                show_debug_message("   - Timer ataque: " + string(timer_ataque));
                
                // For√ßar modo ataque para teste
                modo_ataque = true;
                show_debug_message("   - Modo ataque ativado para teste");
                
                // Verificar inimigos pr√≥ximos
                var _alvo_proximo = instance_nearest(x, y, obj_inimigo);
                if (instance_exists(_alvo_proximo)) {
                    var _distancia = point_distance(x, y, _alvo_proximo.x, _alvo_proximo.y);
                    show_debug_message("   - Inimigo mais pr√≥ximo: " + string(_alvo_proximo) + " a " + string(_distancia) + " pixels");
                    show_debug_message("   - Alcance radar: " + string(radar_alcance));
                    
                    if (_distancia <= radar_alcance) {
                        show_debug_message("   ‚úÖ F-5 pode atacar este inimigo!");
                    } else {
                        show_debug_message("   ‚ùå F-5 n√£o pode atacar - muito longe");
                    }
                } else {
                    show_debug_message("   ‚ùå Nenhum inimigo encontrado");
                }
            }
            
            show_debug_message("üîç === FIM DO TESTE ===");
        }

        // Comando de Movimento (Clique Direito)
        if (mouse_check_button_pressed(mb_right)) {
            // Se estiver definindo patrulha, adiciona um ponto
            if (global.definindo_patrulha == _unidade && variable_instance_exists(_unidade, "pontos_patrulha")) {
                var _coords = global.scr_mouse_to_world();
                ds_list_add(_unidade.pontos_patrulha, [_coords[0], _coords[1]]);
                show_debug_message("üìç Ponto de patrulha adicionado");
            } 
            // Sen√£o, √© uma ordem de movimento normal
            else {
                var _coords = global.scr_mouse_to_world();
                
                // Verificar se a unidade tem as vari√°veis necess√°rias
                if (variable_instance_exists(_unidade, "destino_x") && variable_instance_exists(_unidade, "destino_y")) {
                    _unidade.destino_x = _coords[0];
                    _unidade.destino_y = _coords[1];
                    
                    // Para Constellation, usar sistema simples
                    if (_unidade.object_index == obj_Constellation) {
                        _unidade.estado = "movendo";
                        show_debug_message("üö¢ Ordem de movimento para Constellation");
                        show_debug_message("üö¢ Constellation destino: (" + string(_coords[0]) + ", " + string(_coords[1]) + ")");
                        show_debug_message("üö¢ Constellation estado alterado para: " + _unidade.estado);
                    }
                    // Para outras unidades
                    else {
                        show_debug_message("üéØ Ordem de movimento para " + object_get_name(_unidade.object_index));
                    }
                    
                    // Cancela outros modos se existirem
                    if (variable_instance_exists(_unidade, "alvo_seguir")) {
                        _unidade.alvo_seguir = noone;
                    }
                    global.definindo_patrulha = noone;
                }
            }
        }
    }
    
    // Comandos para Helic√≥ptero (COMANDOS CENTRALIZADOS NO INPUT MANAGER)
    if (_unidade.object_index == obj_helicoptero_militar) {
        // Comandos P e O j√° est√£o no Step do pr√≥prio helic√≥ptero
        // Comandos Q e E j√° est√£o no obj_input_manager
        // Aqui s√≥ mantemos comandos espec√≠ficos do controlador

        // Comando de Movimento (Clique Direito)
        if (mouse_check_button_pressed(mb_right)) {
            // Se estiver definindo patrulha, adiciona um ponto
            if (global.definindo_patrulha == _unidade && variable_instance_exists(_unidade, "pontos_patrulha")) {
                var _coords = global.scr_mouse_to_world();
                ds_list_add(_unidade.pontos_patrulha, [_coords[0], _coords[1]]);
                show_debug_message("üìç Ponto de patrulha adicionado");
            } 
            // Sen√£o, √© uma ordem de movimento normal
            else {
                var _coords = global.scr_mouse_to_world();
                
                // Verificar se a unidade tem as vari√°veis necess√°rias
                if (variable_instance_exists(_unidade, "destino_x") && variable_instance_exists(_unidade, "destino_y")) {
                    _unidade.destino_x = _coords[0];
                    _unidade.destino_y = _coords[1];
                    
                    // Para Constellation, usar sistema simples
                    if (_unidade.object_index == obj_Constellation) {
                        _unidade.estado = "movendo";
                        show_debug_message("üö¢ Ordem de movimento para Constellation");
                        show_debug_message("üö¢ Constellation destino: (" + string(_coords[0]) + ", " + string(_coords[1]) + ")");
                        show_debug_message("üö¢ Constellation estado alterado para: " + _unidade.estado);
                    }
                    // Para helic√≥ptero, usar sistema espec√≠fico
                    else if (variable_instance_exists(_unidade, "ESTADO_HELICOPTERO")) {
                        _unidade.estado = _unidade.estado == ESTADO_HELICOPTERO.POUSADO ? ESTADO_HELICOPTERO.DECOLANDO : ESTADO_HELICOPTERO.MOVENDO;
                        if (_unidade.estado == ESTADO_HELICOPTERO.DECOLANDO) { _unidade.timer_transicao = 60; }
                        show_debug_message("üéØ Ordem de movimento para helic√≥ptero");
                    }
                    // Para outras unidades
                    else {
                        show_debug_message("üéØ Ordem de movimento para " + object_get_name(_unidade.object_index));
                    }
                    
                    // Cancela outros modos se existirem
                    if (variable_instance_exists(_unidade, "alvo_seguir")) {
                        _unidade.alvo_seguir = noone;
                    }
                    global.definindo_patrulha = noone;
                }
            }
        }
    }
}