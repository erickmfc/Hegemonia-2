/// @description Controle de sele√ß√£o de unidades - SISTEMA UNIVERSAL COM ZOOM

// =========================================================================
// LISTA CENTRAL DE UNIDADES SELECION√ÅVEIS
// =========================================================================
var _unidades_selecionaveis = [
    obj_Constellation,
    obj_Independence,
    obj_c100,
    obj_lancha_patrulha,
    obj_infantaria,
    obj_soldado_antiaereo,
    obj_tanque,
    obj_blindado_antiaereo,
    obj_caca_f5,
    obj_helicoptero_militar
];

// =========================================================================
// IN√çCIO DO C√ìDIGO DE SELE√á√ÉO UNIVERSAL (COM ZOOM E QUALQUER MAPA)
// =========================================================================

// Checa por um √∫nico clique do bot√£o esquerdo do mouse
if (mouse_check_button_pressed(mb_left)) {

    // --- PASSO 1: Obter as coordenadas do mouse na TELA (GUI) ---
    // Esta √© a posi√ß√£o X e Y do cursor na janela do jogo.
    var _mouse_gui_x = device_mouse_x_to_gui(0);
    var _mouse_gui_y = device_mouse_y_to_gui(0);

    // --- PASSO 2: Obter as informa√ß√µes da C√ÇMERA atual ---
    // Pegamos a refer√™ncia da c√¢mera que est√° ativa na primeira viewport
    var _cam = view_camera[0];
    
    // Onde a c√¢mera est√° posicionada dentro do MUNDO do jogo
    var _cam_x = camera_get_view_x(_cam);
    var _cam_y = camera_get_view_y(_cam);
    
    // O tamanho da "lente" da c√¢mera (quanto do MUNDO ela est√° enxergando)
    var _cam_w = camera_get_view_width(_cam);
    var _cam_h = camera_get_view_height(_cam);

    // --- PASSO 3: Calcular o n√≠vel de ZOOM atual ---
    // Comparamos o tamanho da lente da c√¢mera com o tamanho da tela para saber o zoom.
    var _zoom_level_x = _cam_w / display_get_gui_width();
    var _zoom_level_y = _cam_h / display_get_gui_height();

    // --- PASSO 4: A CONVERS√ÉO M√ÅGICA ---
    // CORRE√á√ÉO: Usar fun√ß√£o global para coordenadas consistentes
    var _coords = global.scr_mouse_to_world();
    var _mouse_world_x = _coords[0];
    var _mouse_world_y = _coords[1];

    // --- PASSO 5: Verificar se clicou em edif√≠cio primeiro ---
    // CORRE√á√ÉO: Usar position_meeting para detec√ß√£o mais precisa
    var edificio_clicado = noone;
    
    // Lista de todos os edif√≠cios que podem ser clicados
    var edificios = [
        obj_quartel,
        obj_quartel_marinha, 
        obj_aeroporto_militar,
        obj_casa,
        obj_banco,
        obj_fazenda,
        obj_research_center
    ];
    
    // Verificar cada edif√≠cio usando position_meeting
    for (var i = 0; i < array_length(edificios); i++) {
        var _edificio_obj = edificios[i];
        if (object_exists(_edificio_obj)) {
            var _instancia = instance_position(_mouse_world_x, _mouse_world_y, _edificio_obj);
            if (_instancia != noone) {
                edificio_clicado = _instancia;
                break;
            }
        }
    }
    
    if (edificio_clicado != noone) {
        show_debug_message("Clique em edif√≠cio detectado - ignorando sele√ß√£o de unidades");
        show_debug_message("Edif√≠cio: " + object_get_name(edificio_clicado.object_index) + " ID: " + string(edificio_clicado));
        // CORRE√á√ÉO: Remover return para permitir que Mouse Events dos edif√≠cios sejam executados
        // O Mouse Event do edif√≠cio ser√° processado normalmente ap√≥s este Step Event
    }

    // --- PASSO 6: Usar as coordenadas CORRETAS para selecionar ---
    // Agora, em vez de 'mouse_x', usamos nossas novas vari√°veis _mouse_world_x/y
    var _instancia_selecionada = noone;
    
    // --- PASSO 6: Usar as coordenadas CORRETAS para selecionar ---
    // Itera sobre a lista para encontrar a unidade clicada
    for (var i = 0; i < array_length(_unidades_selecionaveis); i++) {
        var _obj = _unidades_selecionaveis[i];
        var _inst = collision_point(_mouse_world_x, _mouse_world_y, _obj, true, true); // ‚úÖ CORRE√á√ÉO: Colis√£o precisa ativada
        if (_inst != noone) {
            _instancia_selecionada = _inst;
            break; // Para na primeira unidade encontrada
        }
    }

    // --- PASSO 7: L√≥gica de Sele√ß√£o ---
    if (instance_exists(_instancia_selecionada)) {
        // Se est√°vamos esperando um alvo para o comando SEGUIR
        if (instance_exists(global.esperando_alvo_seguir)) {
            global.esperando_alvo_seguir.alvo_seguir = _instancia_selecionada;
            
            // Determinar o estado correto baseado no tipo de unidade
            if (global.esperando_alvo_seguir.object_index == obj_caca_f5) {
                // Sistema simplificado - apenas define alvo para seguir
                global.esperando_alvo_seguir.alvo_seguir = _instancia_selecionada;
            } else if (global.esperando_alvo_seguir.object_index == obj_helicoptero_militar) {
                global.esperando_alvo_seguir.estado = "seguindo";
            }
            
            show_debug_message("üéØ Alvo definido para seguir: " + object_get_name(_instancia_selecionada.object_index));
            global.esperando_alvo_seguir = noone; // Reseta o modo
        } else {
            // Sele√ß√£o normal de unidades
            // ‚úÖ CORRE√á√ÉO: Sistema de sele√ß√£o m√∫ltipla com Shift
            if (keyboard_check(vk_shift)) {
                // Sele√ß√£o m√∫ltipla com Shift
                if (!_instancia_selecionada.selecionado) {
                    _instancia_selecionada.selecionado = true;
                    if (!variable_global_exists("unidades_selecionadas")) {
                        global.unidades_selecionadas = ds_list_create();
                    }
                    ds_list_add(global.unidades_selecionadas, _instancia_selecionada);
                    show_debug_message("‚ûï Unidade adicionada √† sele√ß√£o m√∫ltipla: " + object_get_name(_instancia_selecionada.object_index));
                } else {
                    // Remover da sele√ß√£o se j√° estava selecionada
                    _instancia_selecionada.selecionado = false;
                    if (variable_global_exists("unidades_selecionadas")) {
                        var _index = ds_list_find_index(global.unidades_selecionadas, _instancia_selecionada);
                        if (_index >= 0) {
                            ds_list_delete(global.unidades_selecionadas, _index);
                        }
                    }
                    show_debug_message("‚ûñ Unidade removida da sele√ß√£o: " + object_get_name(_instancia_selecionada.object_index));
                }
            } else {
                // Sele√ß√£o √∫nica (limpa todas as outras)
                for (var i = 0; i < array_length(_unidades_selecionaveis); i++) {
                    var _obj = _unidades_selecionaveis[i];
                    with (_obj) { selecionado = false; }
                }
                
                // Selecionar a unidade clicada
                _instancia_selecionada.selecionado = true;
                global.unidade_selecionada = _instancia_selecionada;
                
                // Limpar lista de sele√ß√£o m√∫ltipla e adicionar apenas esta unidade
                if (!variable_global_exists("unidades_selecionadas")) {
                    global.unidades_selecionadas = ds_list_create();
                } else {
                    ds_list_clear(global.unidades_selecionadas);
                }
                ds_list_add(global.unidades_selecionadas, _instancia_selecionada);
            }
            
            // Debug para verificar sele√ß√£o da lancha
            if (object_get_name(_instancia_selecionada.object_index) == "obj_lancha_patrulha") {
                show_debug_message("üö¢ LANCHA SELECIONADA VIA CONTROLADOR!");
                show_debug_message("üö¢ ID da lancha: " + string(_instancia_selecionada));
                show_debug_message("üö¢ global.unidade_selecionada: " + string(global.unidade_selecionada));
                show_debug_message("üö¢ Tem pontos_patrulha: " + string(variable_instance_exists(_instancia_selecionada, "pontos_patrulha")));
            }
            
            // Debug para verificar sele√ß√£o do Constellation
            if (object_get_name(_instancia_selecionada.object_index) == "obj_Constellation") {
                show_debug_message("üö¢ CONSTELLATION SELECIONADO VIA CONTROLADOR!");
                show_debug_message("üö¢ ID do Constellation: " + string(_instancia_selecionada));
                show_debug_message("üö¢ global.unidade_selecionada: " + string(global.unidade_selecionada));
                show_debug_message("üö¢ Estado: " + string(_instancia_selecionada.estado));
                show_debug_message("üö¢ Selecionado: " + string(_instancia_selecionada.selecionado));
            }
            
            // Debug para verificar sele√ß√£o da Independence
            if (object_get_name(_instancia_selecionada.object_index) == "obj_Independence") {
                show_debug_message("üö¢ INDEPENDENCE SELECIONADA VIA CONTROLADOR!");
                show_debug_message("üö¢ ID da Independence: " + string(_instancia_selecionada));
                show_debug_message("üö¢ global.unidade_selecionada: " + string(global.unidade_selecionada));
                show_debug_message("üö¢ Estado: " + string(_instancia_selecionada.estado));
                show_debug_message("üö¢ Selecionado: " + string(_instancia_selecionada.selecionado));
                show_debug_message("üö¢ HP: " + string(_instancia_selecionada.hp_atual) + "/" + string(_instancia_selecionada.hp_max));
                show_debug_message("üö¢ Velocidade: " + string(_instancia_selecionada.velocidade_movimento));
                show_debug_message("üö¢ Tem canh√£o: " + string(instance_exists(_instancia_selecionada.canhao_instancia)));
            }
            
            // ======================================================================
            // FUNCIONALIDADE DE CENTRALIZAR C√ÇMERA DESATIVADA
            // ======================================================================
            // var _input_manager = instance_find(obj_input_manager, 0);
            // if (instance_exists(_input_manager)) {
            //     // Manda o gerenciador de c√¢mera mover a c√¢mera para a posi√ß√£o da unidade
            //     _input_manager.camera_x = _instancia_selecionada.x;
            //     _input_manager.camera_y = _instancia_selecionada.y;
            //     
            //     show_debug_message("üì∑ C√¢mera centralizada na unidade: " + object_get_name(_instancia_selecionada.object_index));
            // }
            // ======================================================================
            
            show_debug_message("Sele√ß√£o: " + object_get_name(_instancia_selecionada.object_index));
            show_debug_message("üìç Coordenadas mundo: (" + string(_mouse_world_x) + ", " + string(_mouse_world_y) + ")");
        }
    } else {
        // Se clicamos no vazio
        if (instance_exists(global.esperando_alvo_seguir)) {
            // Cancelar modo de seguir se clicou no vazio
            show_debug_message("‚ùå Modo SEGUIR cancelado - clique no vazio");
            global.esperando_alvo_seguir = noone;
        } else {
            // Dessele√ß√£o normal
            for (var i = 0; i < array_length(_unidades_selecionaveis); i++) {
                var _obj = _unidades_selecionaveis[i];
                with (_obj) { selecionado = false; }
            }
            global.unidade_selecionada = noone;
            
            show_debug_message("Clique no vazio.");
            show_debug_message("üìç Coordenadas mundo: (" + string(_mouse_world_x) + ", " + string(_mouse_world_y) + ")");
        }
    }
    
    // === L√ìGICA DE ADICIONAR PONTOS DE PATRULHA ===
    if (instance_exists(global.definindo_patrulha)) {
        // Adicionar ponto de patrulha no local clicado
        // Verificar qual vari√°vel de patrulha usar baseado no tipo de objeto
        var _unidade = global.definindo_patrulha;
        var _lista_patrulha = noone;
        
        // Determinar qual lista de patrulha usar baseado no objeto
        if (variable_instance_exists(_unidade, "pontos_patrulha")) {
             _lista_patrulha = _unidade.pontos_patrulha;
        } else { // Fallback para sistemas mais antigos
            // Para outros objetos, tentar 'patrol_points' ou 'pontos_patrulha'
            if (variable_instance_exists(_unidade, "patrol_points")) {
                _lista_patrulha = _unidade.patrol_points;
            } else if (variable_instance_exists(_unidade, "pontos_patrulha")) {
                _lista_patrulha = _unidade.pontos_patrulha;
            } else if (variable_instance_exists(_unidade, "patrulha")) {
                _lista_patrulha = _unidade.patrulha;
            }
        }
        
        // Adicionar ponto se a lista foi encontrada
        if (_lista_patrulha != noone && ds_exists(_lista_patrulha, ds_type_list)) {
            // Corrigindo erro GM1041 - usar ds_list_add com par√¢metros separados
            ds_list_add(_lista_patrulha, _mouse_world_x);
            ds_list_add(_lista_patrulha, _mouse_world_y);
            show_debug_message("üìç Ponto de patrulha adicionado: (" + string(_mouse_world_x) + ", " + string(_mouse_world_y) + ")");
            show_debug_message("üìä Total de pontos: " + string(ds_list_size(_lista_patrulha) / 2));
        } else {
            show_debug_message("‚ùå ERRO: Lista de patrulha n√£o encontrada para " + object_get_name(_unidade.object_index));
        }
    }
}
// =========================================================================
// FIM DO C√ìDIGO DE SELE√á√ÉO
// =========================================================================

// =========================================================================
// SELE√á√ÉO M√öLTIPLA COM ARRASTAR (COORDENADAS COM ZOOM)
// =========================================================================

if (mouse_check_button(mb_left)) {
    if (!selecionando) {
        selecionando = true;
        
        // Usar o mesmo sistema de convers√£o de coordenadas
        var _mouse_gui_x = device_mouse_x_to_gui(0);
        var _mouse_gui_y = device_mouse_y_to_gui(0);
        var _cam = view_camera[0];
        var _cam_x = camera_get_view_x(_cam);
        var _cam_y = camera_get_view_y(_cam);
        var _cam_w = camera_get_view_width(_cam);
        var _cam_h = camera_get_view_height(_cam);
        var _zoom_level_x = _cam_w / display_get_gui_width();
        var _zoom_level_y = _cam_h / display_get_gui_height();
        
        inicio_selecao_x = _cam_x + (_mouse_gui_x * _zoom_level_x);
        inicio_selecao_y = _cam_y + (_mouse_gui_y * _zoom_level_y);
    }
} else {
    if (selecionando) {
        selecionando = false;
        
        // Usar o mesmo sistema de convers√£o de coordenadas
        var _mouse_gui_x = device_mouse_x_to_gui(0);
        var _mouse_gui_y = device_mouse_y_to_gui(0);
        var _cam = view_camera[0];
        var _cam_x = camera_get_view_x(_cam);
        var _cam_y = camera_get_view_y(_cam);
        var _cam_w = camera_get_view_width(_cam);
        var _cam_h = camera_get_view_height(_cam);
        var _zoom_level_x = _cam_w / display_get_gui_width();
        var _zoom_level_y = _cam_h / display_get_gui_height();
        
        var world_x = _cam_x + (_mouse_gui_x * _zoom_level_x);
        var world_y = _cam_y + (_mouse_gui_y * _zoom_level_y);
        
        var min_x = min(inicio_selecao_x, world_x);
        var max_x = max(inicio_selecao_x, world_x);
        var min_y = min(inicio_selecao_y, world_y);
        var max_y = max(inicio_selecao_y, world_y);
        
        // Refatorado: Itera sobre o array de unidades selecion√°veis
        for (var i = 0; i < array_length(_unidades_selecionaveis); i++) {
            var _obj = _unidades_selecionaveis[i];
            
            with (_obj) {
                if (x >= min_x && x <= max_x && y >= min_y && y <= max_y) {
                    selecionado = true;
                }
            }
        }
        show_debug_message("üñ±Ô∏è Sele√ß√£o m√∫ltipla finalizada.");
    }
}

// ===============================================
// GERENCIADOR DE COMANDOS PARA UNIDADE SELECIONADA
// ===============================================
if (instance_exists(global.unidade_selecionada)) {
    var _unidade = global.unidade_selecionada;

    // Comandos para F-5 (COMANDOS CENTRALIZADOS NO INPUT MANAGER)
    //if (_unidade.object_index == obj_caca_f5) { // Condi√ß√£o removida para generalizar
        // Comandos P e O j√° est√£o no Step do pr√≥prio F-5
        // Comandos Q e E j√° est√£o no obj_input_manager
        // Aqui s√≥ mantemos comandos espec√≠ficos do controlador

        // Comando de Teste de M√≠sseis (Tecla T)
        if (keyboard_check_pressed(ord("T"))) {
            show_debug_message("üîç === TESTE SISTEMA M√çSSEIS F-5 ===");
            
            // Contar unidades
            var _f5_count = instance_number(obj_caca_f5);
            var _inimigo_count = instance_number(obj_inimigo);
            
            show_debug_message("üìä F-5s no mapa: " + string(_f5_count));
            show_debug_message("üìä Inimigos no mapa: " + string(_inimigo_count));
            
            if (_f5_count == 0) {
                show_debug_message("‚ùå ERRO: Nenhum F-5 encontrado no mapa!");
                return;
            }
            
            if (_inimigo_count == 0) {
                show_debug_message("‚ùå ERRO: Nenhum inimigo encontrado no mapa!");
                show_debug_message("üí° SOLU√á√ÉO: Crie alguns obj_inimigo no mapa para testar");
                return;
            }
            
            // Testar cada F-5
            with (obj_caca_f5) {
                show_debug_message("‚úàÔ∏è Testando F-5 ID: " + string(id));
                show_debug_message("   - Velocidade: " + string(velocidade_atual));
                show_debug_message("   - Modo ataque: " + string(modo_ataque));
                show_debug_message("   - Altura voo: " + string(altura_voo));
                show_debug_message("   - Timer ataque: " + string(timer_ataque));
                
                // For√ßar modo ataque para teste
                modo_ataque = true;
                show_debug_message("   - Modo ataque ativado para teste");
                
                // Verificar inimigos pr√≥ximos
                var _alvo_proximo = instance_nearest(x, y, obj_inimigo);
                if (instance_exists(_alvo_proximo)) {
                    var _distancia = point_distance(x, y, _alvo_proximo.x, _alvo_proximo.y);
                    show_debug_message("   - Inimigo mais pr√≥ximo: " + string(_alvo_proximo) + " a " + string(_distancia) + " pixels");
                    show_debug_message("   - Alcance radar: " + string(radar_alcance));
                    
                    if (_distancia <= radar_alcance) {
                        show_debug_message("   ‚úÖ F-5 pode atacar este inimigo!");
                    } else {
                        show_debug_message("   ‚ùå F-5 n√£o pode atacar - muito longe");
                    }
                } else {
                    show_debug_message("   ‚ùå Nenhum inimigo encontrado");
                }
            }
            
            show_debug_message("üîç === FIM DO TESTE ===");
        }

        // Comando de Movimento (Clique Direito) - UNIFICADO PARA TODAS AS UNIDADES
        if (mouse_check_button_pressed(mb_right)) {
            // ‚úÖ CORRE√á√ÉO: Bloquear movimento do C-100 quando em modo de embarque
            if (object_get_name(_unidade.object_index) == "obj_c100" && _unidade.modo_receber_carga) {
                show_debug_message("üöÅ C-100: Comando de movimento bloqueado - modo embarque ativo");
                return; // N√£o processar movimento
            }
            
            // Se estiver definindo patrulha, adiciona um ponto
            if (global.definindo_patrulha == _unidade && variable_instance_exists(_unidade, "pontos_patrulha")) {
                var _coords = global.scr_mouse_to_world();
                // Corrigindo erro GM1041 - usar ds_list_add com par√¢metros separados
                ds_list_add(_unidade.pontos_patrulha, _coords[0]);
                ds_list_add(_unidade.pontos_patrulha, _coords[1]);
                show_debug_message("üìç Ponto de patrulha adicionado");
            } 
            // Sen√£o, √© uma ordem de movimento normal
            else {
                // Corrigindo aviso GM2044 - vari√°vel local j√° declarada
                _coords = global.scr_mouse_to_world();
                
                // ‚úÖ CORRE√á√ÉO: Usar a fun√ß√£o interna da unidade para dar a ordem de movimento.
                // Isso garante que a pr√≥pria unidade lide com seus estados e destinos.
                if (variable_instance_exists(_unidade, "ordem_mover")) {
                    // Clamp destino para dentro da sala antes de delegar
                    var _tx = clamp(_coords[0], 8, room_width - 8);
                    var _ty = clamp(_coords[1], 8, room_height - 8);
                    _unidade.ordem_mover(_tx, _ty);
                    show_debug_message("üö¢ Ordem de movimento enviada para " + object_get_name(_unidade.object_index) + " via fun√ß√£o interna.");
                    
                    // Debug espec√≠fico para Independence
                    if (object_get_name(_unidade.object_index) == "obj_Independence") {
                        show_debug_message("üö¢ INDEPENDENCE: Ordem de movimento recebida!");
                        show_debug_message("üö¢ INDEPENDENCE: Destino: (" + string(_tx) + ", " + string(_ty) + ")");
                        show_debug_message("üö¢ INDEPENDENCE: Estado atual: " + string(_unidade.estado));
                        show_debug_message("üö¢ INDEPENDENCE: Velocidade: " + string(_unidade.velocidade_movimento));
                        show_debug_message("üö¢ INDEPENDENCE: Tem ordem_mover: " + string(variable_instance_exists(_unidade, "ordem_mover")));
                    }
                } 
                // Fallback para unidades mais antigas que n√£o t√™m a fun√ß√£o 'ordem_mover'
                else if (variable_instance_exists(_unidade, "ESTADO_HELICOPTERO")) {
                        _unidade.estado = _unidade.estado == ESTADO_HELICOPTERO.POUSADO ? ESTADO_HELICOPTERO.DECOLANDO : ESTADO_HELICOPTERO.MOVENDO;
                        if (_unidade.estado == ESTADO_HELICOPTERO.DECOLANDO) { _unidade.timer_transicao = 60; }
                        show_debug_message("üéØ Ordem de movimento para helic√≥ptero");
                } else {
                    // ‚úÖ CORRE√á√ÉO CR√çTICA: Sistema legado com clamp para evitar movimento fora da sala
                    var _tx = clamp(_coords[0], 8, room_width - 8);
                    var _ty = clamp(_coords[1], 8, room_height - 8);
                    
                    // ‚úÖ CORRE√á√ÉO ADICIONAL: Verificar se o destino √© muito diferente do atual
                    var _distancia_atual = point_distance(_unidade.x, _unidade.y, _tx, _ty);
                    var _distancia_anterior = point_distance(_unidade.x, _unidade.y, _unidade.destino_x, _unidade.destino_y);
                    
                    // Se o novo destino √© muito diferente do anterior, pode ser um erro de zoom
                    if (_distancia_anterior > 0 && abs(_distancia_atual - _distancia_anterior) > 200) {
                        show_debug_message("‚ö†Ô∏è AVISO: Destino muito diferente detectado - pode ser erro de zoom");
                        show_debug_message("   Dist√¢ncia anterior: " + string(_distancia_anterior) + " | Nova: " + string(_distancia_atual));
                        show_debug_message("   Destino anterior: (" + string(_unidade.destino_x) + ", " + string(_unidade.destino_y) + ")");
                        show_debug_message("   Novo destino: (" + string(_tx) + ", " + string(_ty) + ")");
                    }
                    
                    _unidade.destino_x = _tx;
                    _unidade.destino_y = _ty;
                    _unidade.estado = "movendo";
                    show_debug_message("üéØ Ordem de movimento (legado) para " + object_get_name(_unidade.object_index) + " - Destino: (" + string(_tx) + ", " + string(_ty) + ")");
                }
                    
                // Cancela outros modos se existirem
                if (variable_instance_exists(_unidade, "alvo_seguir")) {
                    _unidade.alvo_seguir = noone;
                }
                global.definindo_patrulha = noone;
            }
        }
    //} // Fim do if que foi removido
}