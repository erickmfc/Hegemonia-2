/// @description Verifica√ß√£o de limpeza de mem√≥ria
/// @function scr_verificacao_limpeza_memoria

show_debug_message("=== VERIFICA√á√ÉO: LIMPEZA DE MEM√ìRIA ===");

// 1. VERIFICA√á√ÉO DE DATA STRUCTURES
show_debug_message("üîç VERIFICA√á√ÉO DE DATA STRUCTURES:");

// Verificar filas de produ√ß√£o
with (obj_quartel_marinha) {
    show_debug_message("üè≠ Quartel ID: " + string(id));
    show_debug_message("   - Fila produ√ß√£o existe: " + string(variable_instance_exists(id, "fila_producao")));
    if (variable_instance_exists(id, "fila_producao")) {
        show_debug_message("   - Tamanho da fila: " + string(ds_queue_size(fila_producao)));
        show_debug_message("   - Fila vazia: " + string(ds_queue_empty(fila_producao)));
    }
    
    show_debug_message("   - Lista unidades existe: " + string(variable_instance_exists(id, "unidades_disponiveis")));
    if (variable_instance_exists(id, "unidades_disponiveis")) {
        show_debug_message("   - Tamanho da lista: " + string(ds_list_size(unidades_disponiveis)));
    }
}

// Verificar listas de patrulha
with (obj_infantaria) {
    show_debug_message("üèÉ Infantaria ID: " + string(id));
    show_debug_message("   - Lista patrulha existe: " + string(variable_instance_exists(id, "patrulha")));
    if (variable_instance_exists(id, "patrulha")) {
        show_debug_message("   - Tamanho da patrulha: " + string(ds_list_size(patrulha)));
    }
}

// 2. VERIFICA√á√ÉO DE INST√ÇNCIAS
show_debug_message("üîç VERIFICA√á√ÉO DE INST√ÇNCIAS:");

var total_instancias = 0;
var tipos_instancias = ds_map_create();

// Contar inst√¢ncias por tipo
with (all) {
    total_instancias++;
    var tipo = object_get_name(object_index);
    if (ds_map_exists(tipos_instancias, tipo)) {
        ds_map_set(tipos_instancias, tipo, ds_map_find_value(tipos_instancias, tipo) + 1);
    } else {
        ds_map_set(tipos_instancias, tipo, 1);
    }
}

show_debug_message("   - Total de inst√¢ncias: " + string(total_instancias));

// Mostrar contagem por tipo
var keys = ds_map_keys_to_array(tipos_instancias);
for (var i = 0; i < array_length(keys); i++) {
    var tipo = keys[i];
    var count = ds_map_find_value(tipos_instancias, tipo);
    show_debug_message("   - " + tipo + ": " + string(count));
}

// Limpar mapa tempor√°rio
ds_map_destroy(tipos_instancias);

// 3. VERIFICA√á√ÉO DE VARI√ÅVEIS GLOBAIS
show_debug_message("üîç VERIFICA√á√ÉO DE VARI√ÅVEIS GLOBAIS:");

show_debug_message("   - global.dinheiro: " + string(variable_global_exists("dinheiro") ? global.dinheiro : "N√ÉO EXISTE"));
show_debug_message("   - global.minerio: " + string(variable_global_exists("minerio") ? global.minerio : "N√ÉO EXISTE"));
show_debug_message("   - global.debug_enabled: " + string(variable_global_exists("debug_enabled") ? global.debug_enabled : "N√ÉO EXISTE"));
show_debug_message("   - global.menu_recrutamento_aberto: " + string(variable_global_exists("menu_recrutamento_aberto") ? global.menu_recrutamento_aberto : "N√ÉO EXISTE"));

// 4. VERIFICA√á√ÉO DE TIMERS E ALARMS
show_debug_message("üîç VERIFICA√á√ÉO DE TIMERS E ALARMS:");

with (obj_quartel_marinha) {
    show_debug_message("üè≠ Quartel ID: " + string(id));
    show_debug_message("   - Alarm[0]: " + string(alarm[0]));
    show_debug_message("   - Alarm[1]: " + string(alarm[1]));
    show_debug_message("   - Alarm[2]: " + string(alarm[2]));
    show_debug_message("   - Timer produ√ß√£o step: " + string(variable_instance_exists(id, "timer_producao_step") ? timer_producao_step : "N√ÉO EXISTE"));
}

// 5. VERIFICA√á√ÉO DE SPRITES E SONS
show_debug_message("üîç VERIFICA√á√ÉO DE RECURSOS:");

show_debug_message("   - Sprites carregados: " + string(sprite_get_number()));
show_debug_message("   - Sons carregados: " + string(audio_get_number()));
show_debug_message("   - Fontes carregadas: " + string(font_get_number()));

// 6. TESTE DE LIMPEZA MANUAL
show_debug_message("üß™ TESTE DE LIMPEZA MANUAL:");

// Limpar filas vazias
with (obj_quartel_marinha) {
    if (variable_instance_exists(id, "fila_producao") && ds_queue_empty(fila_producao)) {
        show_debug_message("üßπ Limpando fila vazia do quartel " + string(id));
        // N√£o destruir a fila, apenas garantir que est√° vazia
    }
}

// Limpar listas de patrulha vazias
with (obj_infantaria) {
    if (variable_instance_exists(id, "patrulha") && ds_list_size(patrulha) == 0) {
        show_debug_message("üßπ Lista de patrulha vazia na infantaria " + string(id));
    }
}

// 7. VERIFICA√á√ÉO DE VAZAMENTOS POTENCIAIS
show_debug_message("üîç VERIFICA√á√ÉO DE VAZAMENTOS POTENCIAIS:");

var vazamentos_encontrados = 0;

// Verificar inst√¢ncias √≥rf√£s
with (all) {
    if (variable_instance_exists(id, "parent") && parent != noone && !instance_exists(parent)) {
        show_debug_message("‚ö†Ô∏è Inst√¢ncia √≥rf√£ encontrada: " + string(id) + " (parent: " + string(parent) + ")");
        vazamentos_encontrados++;
    }
}

// Verificar refer√™ncias inv√°lidas
with (all) {
    if (variable_instance_exists(id, "alvo") && alvo != noone && !instance_exists(alvo)) {
        show_debug_message("‚ö†Ô∏è Refer√™ncia inv√°lida encontrada: " + string(id) + " (alvo: " + string(alvo) + ")");
        vazamentos_encontrados++;
    }
}

if (vazamentos_encontrados == 0) {
    show_debug_message("‚úÖ Nenhum vazamento de mem√≥ria detectado");
} else {
    show_debug_message("‚ö†Ô∏è " + string(vazamentos_encontrados) + " vazamentos potenciais encontrados");
}

// 8. RECOMENDA√á√ïES
show_debug_message("üí° RECOMENDA√á√ïES:");

if (total_instancias > 1000) {
    show_debug_message("   - ‚ö†Ô∏è Muitas inst√¢ncias (" + string(total_instancias) + "). Considerar otimiza√ß√£o");
}

with (obj_quartel_marinha) {
    if (variable_instance_exists(id, "fila_producao") && ds_queue_size(fila_producao) > 10) {
        show_debug_message("   - ‚ö†Ô∏è Fila de produ√ß√£o muito grande no quartel " + string(id));
    }
}

show_debug_message("=== VERIFICA√á√ÉO DE LIMPEZA CONCLU√çDA ===");
