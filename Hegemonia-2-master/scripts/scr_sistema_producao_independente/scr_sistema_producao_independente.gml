/// @description Sistema de produ√ß√£o naval independente do Step Event
/// @function scr_sistema_producao_independente

show_debug_message("=== SISTEMA DE PRODU√á√ÉO INDEPENDENTE ===");

// 1. VERIFICAR SE J√Å EXISTE CONTROLADOR DE PRODU√á√ÉO
var controlador_producao = instance_first(obj_controlador_producao_naval);
if (controlador_producao == noone) {
    show_debug_message("üéÆ Criando controlador de produ√ß√£o naval...");
    controlador_producao = instance_create_layer(0, 0, "GUI", obj_controlador_producao_naval);
    if (controlador_producao == noone) {
        show_debug_message("‚ùå Falha ao criar controlador!");
        exit;
    }
}

show_debug_message("‚úÖ Controlador encontrado: " + string(controlador_producao));

// 2. VERIFICAR QUART√âIS
var quartel_count = instance_number(obj_quartel_marinha);
show_debug_message("üè≠ Quart√©is encontrados: " + string(quartel_count));

if (quartel_count == 0) {
    show_debug_message("üè≠ Criando quartel de teste...");
    var quartel_teste = instance_create_layer(200, 200, "rm_mapa_principal", obj_quartel_marinha);
    if (quartel_teste != noone) {
        show_debug_message("‚úÖ Quartel criado: " + string(quartel_teste));
    }
}

// 3. CONFIGURAR PRODU√á√ÉO
with (obj_quartel_marinha) {
    show_debug_message("üè≠ Configurando quartel: " + string(id));
    
    // Limpar estado anterior
    produzindo = false;
    alarm[0] = 0;
    timer_producao_step = 0;
    ds_queue_clear(fila_producao);
    
    // Adicionar unidade √† fila
    var unidade_data = unidades_disponiveis[| 0];
    ds_queue_enqueue(fila_producao, unidade_data);
    
    show_debug_message("üìã Unidade adicionada: " + unidade_data.nome);
    show_debug_message("‚è±Ô∏è Tempo de produ√ß√£o: " + string(unidade_data.tempo_treino) + " frames");
    
    // Configurar produ√ß√£o
    produzindo = true;
    alarm[0] = unidade_data.tempo_treino;
    timer_producao_step = 0;
    
    show_debug_message("üöÄ Produ√ß√£o configurada:");
    show_debug_message("   - Produzindo: " + string(produzindo));
    show_debug_message("   - Alarm[0]: " + string(alarm[0]));
    show_debug_message("   - Timer alternativo: " + string(timer_producao_step));
}

// 4. INICIAR MONITORAMENTO
show_debug_message("üîÑ Iniciando monitoramento de produ√ß√£o...");

// O controlador ir√° monitorar e processar a produ√ß√£o
controlador_producao.monitorando = true;
controlador_producao.timer_monitoramento = 0;

show_debug_message("‚úÖ Sistema de produ√ß√£o independente ativado!");
show_debug_message("üí° O controlador ir√° processar a produ√ß√£o automaticamente");

show_debug_message("=== SISTEMA INDEPENDENTE CONCLU√çDO ===");
