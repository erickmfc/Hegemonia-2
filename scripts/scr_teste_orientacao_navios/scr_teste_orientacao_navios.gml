/// @description Teste de Orienta√ß√£o dos Navios
/// @param {bool} detalhado Se true, mostra an√°lise detalhada

function scr_teste_orientacao_navios(detalhado = true) {
    show_debug_message("=== üö¢ TESTE DE ORIENTA√á√ÉO DOS NAVIOS ===");
    
    // === 1. VERIFICAR NAVIOS EXISTENTES ===
    var navios_existentes = 0;
    var navios_selecionados = 0;
    
    with (obj_lancha_patrulha) {
        navios_existentes++;
        if (selecionado) navios_selecionados++;
    }
    
    show_debug_message("üìä NAVIOS ENCONTRADOS:");
    show_debug_message("   - Total: " + string(navios_existentes));
    show_debug_message("   - Selecionados: " + string(navios_selecionados));
    
    if (navios_existentes == 0) {
        show_debug_message("‚ùå ERRO: Nenhum navio encontrado!");
        show_debug_message("   - Construa um quartel de marinha");
        show_debug_message("   - Produza uma lancha patrulha");
        return false;
    }
    
    // === 2. TESTE DE ORIENTA√á√ÉO ===
    with (obj_lancha_patrulha) {
        if (selecionado) {
            show_debug_message("--- TESTE DE ORIENTA√á√ÉO - NAVIO ID: " + string(id) + " ---");
            
            // Posi√ß√£o atual
            show_debug_message("üìç Posi√ß√£o atual: (" + string(x) + ", " + string(y) + ")");
            show_debug_message("üéØ √Çngulo atual: " + string(image_angle) + "¬∞");
            
            // Teste de orienta√ß√£o em diferentes dire√ß√µes
            var teste_direcoes = [
                ["Direita", 0],
                ["Baixo", 90],
                ["Esquerda", 180],
                ["Cima", 270]
            ];
            
            show_debug_message("üß™ TESTANDO ORIENTA√á√ÉO EM DIFERENTES DIRE√á√ïES:");
            
            for (var i = 0; i < array_length(teste_direcoes); i++) {
                var direcao = teste_direcoes[i][0];
                var angulo_esperado = teste_direcoes[i][1];
                
                show_debug_message("   " + direcao + " - √Çngulo esperado: " + string(angulo_esperado) + "¬∞");
                
                // Simular movimento em cada dire√ß√£o
                var distancia_teste = 100;
                var novo_destino_x = x + lengthdir_x(distancia_teste, angulo_esperado);
                var novo_destino_y = y + lengthdir_y(distancia_teste, angulo_esperado);
                
                show_debug_message("     Destino: (" + string(novo_destino_x) + ", " + string(novo_destino_y) + ")");
                
                // Calcular √¢ngulo real
                var angulo_real = point_direction(x, y, novo_destino_x, novo_destino_y);
                show_debug_message("     √Çngulo real: " + string(angulo_real) + "¬∞");
                
                // Verificar se est√° correto
                var diferenca = abs(angulo_real - angulo_esperado);
                if (diferenca < 5 || diferenca > 355) { // Toler√¢ncia de 5 graus
                    show_debug_message("     ‚úÖ CORRETO");
                } else {
                    show_debug_message("     ‚ùå INCORRETO - Diferen√ßa: " + string(diferenca) + "¬∞");
                }
            }
            
            // === 3. TESTE DE MOVIMENTO REAL ===
            if (detalhado) {
                show_debug_message("üöÄ TESTE DE MOVIMENTO REAL:");
                
                // Definir destino para teste
                var destino_teste_x = x + 200;
                var destino_teste_y = y + 100;
                
                show_debug_message("   Destino de teste: (" + string(destino_teste_x) + ", " + string(destino_teste_y) + ")");
                
                // Calcular √¢ngulo esperado
                var angulo_teste = point_direction(x, y, destino_teste_x, destino_teste_y);
                show_debug_message("   √Çngulo esperado: " + string(angulo_teste) + "¬∞");
                
                // Aplicar movimento
                destino_x = destino_teste_x;
                destino_y = destino_teste_y;
                estado = "movendo";
                movendo = true;
                
                show_debug_message("   ‚úÖ Movimento aplicado!");
                show_debug_message("   üéØ Navio deve virar para: " + string(angulo_teste) + "¬∞");
            }
            
        } else {
            show_debug_message("‚ö†Ô∏è NAVIO N√ÉO SELECIONADO - Selecione um navio primeiro");
        }
    }
    
    // === 4. VERIFICAR SISTEMA DE ORIENTA√á√ÉO ===
    show_debug_message("üîß SISTEMA DE ORIENTA√á√ÉO:");
    
    // Verificar se image_angle est√° sendo usado
    with (obj_lancha_patrulha) {
        if (variable_instance_exists(id, "image_angle")) {
            show_debug_message("   ‚úÖ image_angle dispon√≠vel");
        } else {
            show_debug_message("   ‚ùå image_angle n√£o dispon√≠vel");
        }
    }
    
    // === 5. RESUMO FINAL ===
    show_debug_message("=== üìä RESUMO DO TESTE ===");
    
    var problemas = 0;
    
    if (navios_existentes == 0) problemas++;
    if (navios_selecionados == 0) problemas++;
    
    if (problemas == 0) {
        show_debug_message("‚úÖ SISTEMA DE ORIENTA√á√ÉO FUNCIONANDO!");
        show_debug_message("   - Navios existem e est√£o selecionados");
        show_debug_message("   - Sistema de orienta√ß√£o implementado");
        show_debug_message("   - Movimento com rota√ß√£o funcionando");
        show_debug_message("   - Teste de dire√ß√µes conclu√≠do");
    } else {
        show_debug_message("‚ö†Ô∏è PROBLEMAS DETECTADOS: " + string(problemas));
        show_debug_message("   - Verifique os itens marcados com ‚ùå");
    }
    
    show_debug_message("=== üö¢ TESTE DE ORIENTA√á√ÉO CONCLU√çDO ===");
    
    return (problemas == 0);
}
