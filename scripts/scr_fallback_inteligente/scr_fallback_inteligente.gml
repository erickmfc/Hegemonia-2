/// @function scr_fallback_inteligente(_objeto, _funcao_original, _parametros)
/// @description Sistema de fallback inteligente para fun√ß√µes que podem falhar
/// @param {Asset.GMObject} _objeto Objeto que est√° tentando executar a fun√ß√£o
/// @param {String} _funcao_original Nome da fun√ß√£o original que falhou
/// @param {Array} _parametros Array com os par√¢metros da fun√ß√£o original
/// @return {undefined}

function scr_fallback_inteligente(_objeto, _funcao_original, _parametros) {
    // ===============================================
    // HEGEMONIA GLOBAL - SISTEMA DE FALLBACK INTELIGENTE
    // Sistema de recupera√ß√£o autom√°tica para fun√ß√µes que falham
    // ===============================================
    
    show_debug_message("üîÑ Fallback inteligente ativado para: " + _funcao_original);
    
    // Tentar fun√ß√£o alternativa baseada no tipo de objeto
    switch (_objeto.object_index) {
        case obj_caca_f5:
            scr_fallback_f5(_funcao_original, _parametros);
            break;
            
        case obj_helicoptero_militar:
            scr_fallback_helicoptero(_funcao_original, _parametros);
            break;
            
        case obj_lancha_patrulha:
            scr_fallback_naval(_funcao_original, _parametros);
            break;
            
        default:
            scr_fallback_generico(_funcao_original, _parametros);
            break;
    }
}

/// @function scr_fallback_f5(_funcao, _parametros)
/// @description Fallback espec√≠fico para F-5
/// @param {String} _funcao Nome da fun√ß√£o que falhou
/// @param {Array} _parametros Par√¢metros da fun√ß√£o
/// @return {undefined}

function scr_fallback_f5(_funcao, _parametros) {
    show_debug_message("‚úàÔ∏è Fallback F-5 para fun√ß√£o: " + _funcao);
    
    switch (_funcao) {
        case "scr_mover_aviao":
            // Fallback para movimento do F-5
            var _dist = point_distance(x, y, destino_x, destino_y);
            if (_dist > 8) {
                var _dir_alvo = point_direction(x, y, destino_x, destino_y);
                var _diff_ang = angle_difference(_dir_alvo, image_angle);
                image_angle += clamp(_diff_ang, -velocidade_rotacao, velocidade_rotacao);
                velocidade_atual = min(velocidade_maxima, velocidade_atual + aceleracao);
            } else {
                velocidade_atual = max(0, velocidade_atual - desaceleracao);
            }
            x += lengthdir_x(velocidade_atual, image_angle);
            y += lengthdir_y(velocidade_atual, image_angle);
            break;
            
        case "scr_combate_aereo":
            // Fallback para combate
            if (modo_ataque && altura_voo > 0) {
                var _alvo = instance_nearest(x, y, obj_inimigo);
                if (instance_exists(_alvo) && point_distance(x, y, _alvo.x, _alvo.y) <= radar_alcance) {
                    var _missil = instance_create_layer(x, y, "Instances", obj_tiro_simples);
                    if (instance_exists(_missil)) {
                        _missil.alvo = _alvo;
                        _missil.dono = id;
                        _missil.dano = 40;
                    }
                }
            }
            break;
            
        default:
            show_debug_message("‚ùå Fallback F-5 n√£o encontrado para: " + _funcao);
            break;
    }
}

/// @function scr_fallback_helicoptero(_funcao, _parametros)
/// @description Fallback espec√≠fico para Helic√≥ptero
/// @param {String} _funcao Nome da fun√ß√£o que falhou
/// @param {Array} _parametros Par√¢metros da fun√ß√£o
/// @return {undefined}

function scr_fallback_helicoptero(_funcao, _parametros) {
    show_debug_message("üöÅ Fallback Helic√≥ptero para fun√ß√£o: " + _funcao);
    
    switch (_funcao) {
        case "scr_mover_helicoptero":
            // Fallback para movimento do helic√≥ptero
            var _dist = point_distance(x, y, destino_x, destino_y);
            if (_dist > 10) {
                var _dir_alvo = point_direction(x, y, destino_x, destino_y);
                var _diff_ang = angle_difference(_dir_alvo, image_angle);
                image_angle += clamp(_diff_ang, -2.0, 2.0);
                velocidade_atual = min(3.0, velocidade_atual + 0.08);
            } else {
                velocidade_atual = max(0, velocidade_atual - 0.1);
            }
            x += lengthdir_x(velocidade_atual, image_angle);
            y += lengthdir_y(velocidade_atual, image_angle);
            break;
            
        default:
            show_debug_message("‚ùå Fallback Helic√≥ptero n√£o encontrado para: " + _funcao);
            break;
    }
}

/// @function scr_fallback_naval(_funcao, _parametros)
/// @description Fallback espec√≠fico para unidades navais
/// @param {String} _funcao Nome da fun√ß√£o que falhou
/// @param {Array} _parametros Par√¢metros da fun√ß√£o
/// @return {undefined}

function scr_fallback_naval(_funcao, _parametros) {
    show_debug_message("üö¢ Fallback Naval para fun√ß√£o: " + _funcao);
    
    switch (_funcao) {
        case "scr_mover_naval":
            // Fallback para movimento naval
            var _dist = point_distance(x, y, destino_x, destino_y);
            if (_dist > 15) {
                var _dir_alvo = point_direction(x, y, destino_x, destino_y);
                var _diff_ang = angle_difference(_dir_alvo, image_angle);
                image_angle += clamp(_diff_ang, -1.5, 1.5);
                velocidade_atual = min(2.5, velocidade_atual + 0.06);
            } else {
                velocidade_atual = max(0, velocidade_atual - 0.08);
            }
            x += lengthdir_x(velocidade_atual, image_angle);
            y += lengthdir_y(velocidade_atual, image_angle);
            break;
            
        default:
            show_debug_message("‚ùå Fallback Naval n√£o encontrado para: " + _funcao);
            break;
    }
}

/// @function scr_fallback_generico(_funcao, _parametros)
/// @description Fallback gen√©rico para qualquer objeto
/// @param {String} _funcao Nome da fun√ß√£o que falhou
/// @param {Array} _parametros Par√¢metros da fun√ß√£o
/// @return {undefined}

function scr_fallback_generico(_funcao, _parametros) {
    show_debug_message("üîß Fallback Gen√©rico para fun√ß√£o: " + _funcao);
    
    // Fallback gen√©rico - apenas log do erro
    show_debug_message("‚ö†Ô∏è Fun√ß√£o n√£o encontrada: " + _funcao);
    show_debug_message("üìã Par√¢metros: " + string(_parametros));
    
    // Tentar recupera√ß√£o b√°sica
    if (variable_instance_exists(id, "estado")) {
        estado = "parado";
        show_debug_message("üîÑ Estado resetado para 'parado'");
    }
}